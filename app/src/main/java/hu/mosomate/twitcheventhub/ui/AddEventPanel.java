/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hu.mosomate.twitcheventhub.ui;

import hu.mosomate.twitcheventhub.AppConstants;
import java.awt.Color;

/**
 * Modal dialog layout for adding Twitch events.
 * 
 * @author mosomate
 */
public class AddEventPanel extends javax.swing.JPanel {
    
    /**
     * When the Add button is pressed, this callback is invoked
     */
    private final ModalDialogCallback callback;
    
    /**
     * Creates new form AddEventPanel
     * 
     * @param callback to be called when Add button is clicked
     */
    public AddEventPanel(ModalDialogCallback callback) {
        this.callback = callback;
        
        // Set initial state for UI components
        initComponents();
        updateComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionButtonPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        conditionPanel = new javax.swing.JPanel();
        conditionLabel = new javax.swing.JLabel();
        buiCheckBox = new javax.swing.JCheckBox();
        muiCheckBox = new javax.swing.JCheckBox();
        uiCheckBox = new javax.swing.JCheckBox();
        namePanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        versionLabel = new javax.swing.JLabel();
        versionComboBox = new javax.swing.JComboBox<>();

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout actionButtonPanelLayout = new javax.swing.GroupLayout(actionButtonPanel);
        actionButtonPanel.setLayout(actionButtonPanelLayout);
        actionButtonPanelLayout.setHorizontalGroup(
            actionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, actionButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addButton)
                .addContainerGap())
        );
        actionButtonPanelLayout.setVerticalGroup(
            actionButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        conditionLabel.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        conditionLabel.setText("Condition");

        buiCheckBox.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        buiCheckBox.setText("Include broadcaster user ID");
        buiCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                buiCheckBoxStateChanged(evt);
            }
        });

        muiCheckBox.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        muiCheckBox.setText("Include moderator user ID");
        muiCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                muiCheckBoxStateChanged(evt);
            }
        });

        uiCheckBox.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        uiCheckBox.setText("Include user ID");
        uiCheckBox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                uiCheckBoxStateChanged(evt);
            }
        });

        javax.swing.GroupLayout conditionPanelLayout = new javax.swing.GroupLayout(conditionPanel);
        conditionPanel.setLayout(conditionPanelLayout);
        conditionPanelLayout.setHorizontalGroup(
            conditionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conditionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(conditionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(conditionLabel)
                    .addComponent(buiCheckBox)
                    .addComponent(muiCheckBox)
                    .addComponent(uiCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        conditionPanelLayout.setVerticalGroup(
            conditionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(conditionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(conditionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buiCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(muiCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uiCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        nameLabel.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        nameLabel.setText("Name");

        nameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout namePanelLayout = new javax.swing.GroupLayout(namePanel);
        namePanel.setLayout(namePanelLayout);
        namePanelLayout.setHorizontalGroup(
            namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(namePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(namePanelLayout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(nameTextField))
                .addContainerGap())
        );
        namePanelLayout.setVerticalGroup(
            namePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(namePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        versionLabel.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        versionLabel.setText("Version");

        versionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "beta" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(versionLabel)
                    .addComponent(versionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(versionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(versionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actionButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(namePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(conditionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 101, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(namePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conditionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(actionButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextFieldKeyReleased
        updateComponents();
    }//GEN-LAST:event_nameTextFieldKeyReleased

    private void buiCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_buiCheckBoxStateChanged
        updateComponents();
    }//GEN-LAST:event_buiCheckBoxStateChanged

    private void muiCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_muiCheckBoxStateChanged
        updateComponents();
    }//GEN-LAST:event_muiCheckBoxStateChanged

    private void uiCheckBoxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_uiCheckBoxStateChanged
        updateComponents();
    }//GEN-LAST:event_uiCheckBoxStateChanged

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Get all data from inputs
        var name = nameTextField.getText().trim();
        var version = versionComboBox.getSelectedItem().toString();
        var buiChecked = buiCheckBox.isSelected();
        var muiChecked = muiCheckBox.isSelected();
        var uiChecked = uiCheckBox.isSelected();
        
        // Pack new event
        var newEvent = name + " [" + version + ",";
        
        // Add condition
        if (buiChecked) {
            newEvent += "b";
        }
        if (muiChecked) {
            newEvent += "m";
        }
        if (uiChecked) {
            newEvent += "u";
        }
        
        // Close condition
        newEvent += "]";
        
        // Pass new event to callback
        callback.onPositiveButtonClicked(newEvent);
    }//GEN-LAST:event_addButtonActionPerformed
    
    private void updateComponents() {
        // Necessary variables
        var nameTextFieldText = nameTextField.getText().trim();
        var conditionOk = buiCheckBox.isSelected() ||
                muiCheckBox.isSelected() ||
                uiCheckBox.isSelected();
        var nameTextFieldTextValid = nameTextFieldText.matches(AppConstants.EVENT_NAME_REGEX);
        
        // Tint text of name field based on it's content
        if (nameTextFieldTextValid) {
            nameTextField.setForeground(new Color(204, 204, 204));
        }
        else {
            nameTextField.setForeground(new Color(255, 102, 102));
        }
        
        // Enable Add button if:
        // 1. name field is not blank
        // 2. name field is valid
        // 3. at least one condition is selected
        addButton.setEnabled(!nameTextFieldText.isBlank() &&
                nameTextFieldTextValid &&
                conditionOk
        );
    }
    
    public javax.swing.JButton getPositiveButton() {
        return addButton;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionButtonPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox buiCheckBox;
    private javax.swing.JLabel conditionLabel;
    private javax.swing.JPanel conditionPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox muiCheckBox;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPanel namePanel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JCheckBox uiCheckBox;
    private javax.swing.JComboBox<String> versionComboBox;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
}
