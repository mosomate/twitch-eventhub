/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hu.mosomate.twitcheventhub;

import com.formdev.flatlaf.FlatDarkLaf;
import hu.mosomate.twitcheventhub.utils.SwingHelper;
import hu.mosomate.twitcheventhub.utils.TwitchApiHelper;
import hu.mosomate.twitcheventhub.utils.TwitchUser;
import hu.mosomate.twitcheventhub.utils.eventsub.EventSubManager;
import hu.mosomate.twitcheventhub.utils.eventsub.EventSubManagerListener;
import hu.mosomate.twitcheventhub.utils.oauth.OAuthHelper;
import hu.mosomate.twitcheventhub.utils.oauth.OAuthLoginListener;
import hu.mosomate.twitcheventhub.utils.webserver.WebServerManager;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.json.JSONObject;

/**
 *
 * @author mosomate
 */
public class MainWindow extends javax.swing.JFrame implements EventSubManagerListener, OAuthLoginListener {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MainWindow.class.getName());
    
    /**
     * Default event names. These cover most of the basic events.
     */
    private static final String[] defaultEventNames = new String[] {
        "channel.bits.use",
        "channel.channel_points_automatic_reward_redemption.add",
        "channel.channel_points_custom_reward_redemption.add",
        "channel.chat.message",
        "channel.chat.notification",
        "channel.cheer",
        "channel.follow"
    };
    
    /**
     * Required OAuth scopes for the default events.
     */
    private static final String[] defaultOAuthScopes = new String[] {
        "bits:read",
        "channel:read:redemptions",
        "moderator:read:followers",
        "user:read:chat"
    };
    
    /**
     * Manages the WebSocket connection and subscription to EvenSub service.
     */
    private final EventSubManager eventSubManager = new EventSubManager();
    
    /**
     * Manages the web server needed for login process.
     */
    private final WebServerManager webServerManager = new WebServerManager();

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        // Init views
        initLoginSettingsViews();
        initEventSubSettingsViews();
        
        // Update UI to initial state
        updateLoginSettingsLayout();
        
        // Start web server
        webServerManager.setOAuthLoginListener(this);
        webServerManager.startWebServer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        twitchConnectionPanel = new javax.swing.JPanel();
        channelIdTitle = new javax.swing.JLabel();
        channelIdField = new javax.swing.JTextField();
        eventListTitle = new javax.swing.JLabel();
        eventListScrollPane = new javax.swing.JScrollPane();
        eventList = new javax.swing.JList<>();
        removeEventButton = new javax.swing.JButton();
        addEventTitle = new javax.swing.JLabel();
        addEventField = new javax.swing.JTextField();
        addEventButton = new javax.swing.JButton();
        connectionStatusTitle = new javax.swing.JLabel();
        connectionStatusLabel = new javax.swing.JLabel();
        connectDisconnectButton = new javax.swing.JButton();
        setDefaultEventsButton = new javax.swing.JButton();
        setDefaultTwitchIdButton = new javax.swing.JButton();
        loginPanel = new javax.swing.JPanel();
        scopesTitle = new javax.swing.JLabel();
        scopeListScrollPane = new javax.swing.JScrollPane();
        scopeList = new javax.swing.JList<>();
        removeScopeButton = new javax.swing.JButton();
        setDefaultScopesButton = new javax.swing.JButton();
        accountTitle = new javax.swing.JLabel();
        accountStatusLabel = new javax.swing.JLabel();
        loginLogoutButton = new javax.swing.JButton();
        addScopeField = new javax.swing.JTextField();
        addScopeButton = new javax.swing.JButton();
        addScopeTitle = new javax.swing.JLabel();
        applicationIdTitle = new javax.swing.JLabel();
        applicationIdField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Twitch Eventhub");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        twitchConnectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("EventSub settings"));
        twitchConnectionPanel.setToolTipText("");
        twitchConnectionPanel.setName(""); // NOI18N

        channelIdTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        channelIdTitle.setText("Channel ID");

        eventListTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        eventListTitle.setText("Events");

        eventList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        eventList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                eventListValueChanged(evt);
            }
        });
        eventListScrollPane.setViewportView(eventList);

        removeEventButton.setText("Remove event");
        removeEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEventButtonActionPerformed(evt);
            }
        });

        addEventTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        addEventTitle.setText("Add event");

        addEventField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addEventFieldKeyTyped(evt);
            }
        });

        addEventButton.setText("Add");
        addEventButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEventButtonActionPerformed(evt);
            }
        });

        connectionStatusTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        connectionStatusTitle.setText("Connection status");

        connectionStatusLabel.setForeground(new java.awt.Color(255, 102, 102));
        connectionStatusLabel.setText("Disconnected");

        connectDisconnectButton.setText("Connect");
        connectDisconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectDisconnectButtonActionPerformed(evt);
            }
        });

        setDefaultEventsButton.setText("Set defaults");
        setDefaultEventsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefaultEventsButtonActionPerformed(evt);
            }
        });

        setDefaultTwitchIdButton.setText("Default");

        javax.swing.GroupLayout twitchConnectionPanelLayout = new javax.swing.GroupLayout(twitchConnectionPanel);
        twitchConnectionPanel.setLayout(twitchConnectionPanelLayout);
        twitchConnectionPanelLayout.setHorizontalGroup(
            twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(twitchConnectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, twitchConnectionPanelLayout.createSequentialGroup()
                        .addComponent(addEventField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addEventButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, twitchConnectionPanelLayout.createSequentialGroup()
                        .addComponent(connectionStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(connectDisconnectButton))
                    .addGroup(twitchConnectionPanelLayout.createSequentialGroup()
                        .addGroup(twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(channelIdTitle)
                            .addComponent(eventListTitle)
                            .addComponent(addEventTitle)
                            .addComponent(connectionStatusTitle)
                            .addGroup(twitchConnectionPanelLayout.createSequentialGroup()
                                .addComponent(removeEventButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setDefaultEventsButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(twitchConnectionPanelLayout.createSequentialGroup()
                        .addComponent(channelIdField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setDefaultTwitchIdButton)))
                .addContainerGap())
        );
        twitchConnectionPanelLayout.setVerticalGroup(
            twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(twitchConnectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(channelIdTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(channelIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setDefaultTwitchIdButton))
                .addGap(18, 18, 18)
                .addComponent(eventListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeEventButton)
                    .addComponent(setDefaultEventsButton))
                .addGap(18, 18, 18)
                .addComponent(addEventTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEventField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addEventButton))
                .addGap(18, 18, 18)
                .addComponent(connectionStatusTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectDisconnectButton)
                    .addComponent(connectionStatusLabel))
                .addContainerGap())
        );

        loginPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Login settings"));

        scopesTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        scopesTitle.setText("Scopes");

        scopeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scopeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                scopeListValueChanged(evt);
            }
        });
        scopeListScrollPane.setViewportView(scopeList);

        removeScopeButton.setText("Remove scope");
        removeScopeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeScopeButtonActionPerformed(evt);
            }
        });

        setDefaultScopesButton.setText("Set defaults");
        setDefaultScopesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefaultScopesButtonActionPerformed(evt);
            }
        });

        accountTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        accountTitle.setText("Current account");

        accountStatusLabel.setForeground(new java.awt.Color(255, 102, 102));
        accountStatusLabel.setText("No account");

        loginLogoutButton.setText("Login");
        loginLogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginLogoutButtonActionPerformed(evt);
            }
        });

        addScopeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addScopeFieldKeyTyped(evt);
            }
        });

        addScopeButton.setText("Add");
        addScopeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addScopeButtonActionPerformed(evt);
            }
        });

        addScopeTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        addScopeTitle.setText("Add scope");

        applicationIdTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        applicationIdTitle.setText("Application ID");

        applicationIdField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                applicationIdFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scopeListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addComponent(accountStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loginLogoutButton))
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addComponent(addScopeField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addScopeButton))
                    .addComponent(applicationIdField)
                    .addGroup(loginPanelLayout.createSequentialGroup()
                        .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scopesTitle)
                            .addComponent(accountTitle)
                            .addComponent(addScopeTitle)
                            .addGroup(loginPanelLayout.createSequentialGroup()
                                .addComponent(removeScopeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setDefaultScopesButton))
                            .addComponent(applicationIdTitle))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(applicationIdTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applicationIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scopesTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scopeListScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeScopeButton)
                    .addComponent(setDefaultScopesButton))
                .addGap(18, 18, 18)
                .addComponent(addScopeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addScopeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addScopeButton))
                .addGap(18, 18, 18)
                .addComponent(accountTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLogoutButton)
                    .addComponent(accountStatusLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(twitchConnectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(twitchConnectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eventListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_eventListValueChanged
        // Enable remove button if there's selection and at least 2 items
        // are in the list
        if (eventList.getSelectedValue() != null && eventList.getModel().getSize() > 1) {
            removeEventButton.setEnabled(true);
        }
    }//GEN-LAST:event_eventListValueChanged

    private void removeEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEventButtonActionPerformed
        // Get currently selected item index
        var eventIndex = eventList.getSelectedIndex();
        
        // Remove from model
        ((DefaultListModel) eventList.getModel()).remove(eventIndex);
        
        // Disable remove button again
        removeEventButton.setEnabled(false);
    }//GEN-LAST:event_removeEventButtonActionPerformed

    private void setDefaultEventsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefaultEventsButtonActionPerformed
        var eventListModel = (DefaultListModel) eventList.getModel();

        // Remove all elements from model
        eventListModel.removeAllElements();
        
        // Add defaults
        for (var event : defaultEventNames) {
            eventListModel.addElement(event);
        }
    }//GEN-LAST:event_setDefaultEventsButtonActionPerformed

    private void addEventFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addEventFieldKeyTyped
        // Enable "Add" button if the input field is not empty
        addEventButton.setEnabled(!addEventField.getText().isBlank());
    }//GEN-LAST:event_addEventFieldKeyTyped

    private void addEventButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEventButtonActionPerformed
        // Get new event's name
        var newEventName = addEventField.getText().trim();
        
        // Abort if blank
        if (newEventName.isBlank()) {
            return;
        }
        
        // Check if new event is already added
        if (!SwingHelper.safeAddToJList(eventList, newEventName)) {
            // Notify user
            JOptionPane.showMessageDialog(
                MainWindow.this,
                newEventName + " is already added!",
                "Already added",
                JOptionPane.WARNING_MESSAGE
            );
            
            return;
        }
        
        // Clear input field and disable "Add" button again
        addEventField.setText("");
        addEventButton.setEnabled(false);
    }//GEN-LAST:event_addEventButtonActionPerformed

    private void connectDisconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectDisconnectButtonActionPerformed
        // Disconnect
        if (eventSubManager.isConnected()) {
            eventSubManager.close();
        }
        // Connect
        else {
            // Get a list of current event names
            var currentEvents = new ArrayList<String>();

            // Get model from list
            var eventListModel = (DefaultListModel) eventList.getModel();

            // Get current event names
            for (var i = 0; i < eventListModel.getSize(); i++) {
                currentEvents.add(eventListModel.getElementAt(i).toString());
            }
            
            eventSubManager.connect(currentEvents);
        }
    }//GEN-LAST:event_connectDisconnectButtonActionPerformed

    private void loginLogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginLogoutButtonActionPerformed
        // Has logged-in user, log out
        if (LoginSettings.loggedInUser != null) {
            // Clear data
            LoginSettings.accessToken = null;
            LoginSettings.loggedInUser = null;
            
            // Save configuration
            LoginSettings.persistData();
            
            // Update UI
            updateLoginSettingsLayout();
        }
        else {
            // Get application ID
            var applicationId = applicationIdField.getText().trim();
            
            // Get scopes from the list
            var scopes = SwingHelper.getItemsFromJList(scopeList);
            
            // Init login process
            if (!OAuthHelper.initLogin(applicationId, scopes)) {
                // Notify user if the browser cannot be opened
                JOptionPane.showMessageDialog(
                    MainWindow.this,
                    "Login failed. Check if you have a web browser installed!",
                    "Login error",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_loginLogoutButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Stop web server
        webServerManager.stopWebServer();
        
        // Disconnect EvetSub
        eventSubManager.close();
    }//GEN-LAST:event_formWindowClosing

    private void scopeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_scopeListValueChanged
        updateLoginSettingsLayout();
    }//GEN-LAST:event_scopeListValueChanged

    private void removeScopeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeScopeButtonActionPerformed
        // Get currently selected item index
        var scopeIndex = scopeList.getSelectedIndex();
        
        // Remove from model
        ((DefaultListModel) scopeList.getModel()).remove(scopeIndex);
        
        // Update UI
        updateLoginSettingsLayout();
    }//GEN-LAST:event_removeScopeButtonActionPerformed

    private void setDefaultScopesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefaultScopesButtonActionPerformed
        SwingHelper.setItemsForJList(scopeList, Arrays.asList(defaultOAuthScopes));
    }//GEN-LAST:event_setDefaultScopesButtonActionPerformed

    private void addScopeFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addScopeFieldKeyTyped
        updateLoginSettingsLayout();
    }//GEN-LAST:event_addScopeFieldKeyTyped

    private void addScopeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addScopeButtonActionPerformed
        // Get new scope's name
        var newScopeName = addScopeField.getText().trim();
        
        // Abort if blank
        if (newScopeName.isBlank()) {
            return;
        }
        
        // Add new scope to list if not contained already
        if (!SwingHelper.safeAddToJList(scopeList, newScopeName)) {
            // Notify user
            JOptionPane.showMessageDialog(
                MainWindow.this,
                newScopeName + " is already added!",
                "Already added",
                JOptionPane.WARNING_MESSAGE
            );
            
            return;
        }
        
        // Clear input field
        addScopeField.setText("");
        
        // Update UI
        updateLoginSettingsLayout();
    }//GEN-LAST:event_addScopeButtonActionPerformed

    private void applicationIdFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_applicationIdFieldKeyTyped
        updateLoginSettingsLayout();
    }//GEN-LAST:event_applicationIdFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        FlatDarkLaf.setup();
        
        // Load persisted data
        LoginSettings.loadData();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MainWindow().setVisible(true));
    }
    
    private void initEventSubSettingsViews() {
        // Set window for EventSubManager
        eventSubManager.setMessageListener(this);

        // Set channel ID
        channelIdField.setText("");
        
        // Set up event list model
        var eventListModel = new DefaultListModel();
        
        for (var defaultEvent : defaultEventNames) {
            eventListModel.addElement(defaultEvent);
        }
        
        eventList.setModel(eventListModel);
        
        // Set event list remove button
        removeEventButton.setEnabled(false);
        
        // Clear new event field, and disable "Add" button
        addEventField.setText("");
        addEventButton.setEnabled(false);
    }
    
    private void initLoginSettingsViews() {
        
        // ---- Application ID field ----- //
        
        if (LoginSettings.applicationId != null) {
            applicationIdField.setText(LoginSettings.applicationId);
        }
        
        // ---- Scope list ----- //
        
        // New model for list
        var scopeListModel = new DefaultListModel();
        
        // Add persisted scopes
        if (LoginSettings.scopes != null && !LoginSettings.scopes.isEmpty()) {
            for (var persistedScope : LoginSettings.scopes) {
                scopeListModel.addElement(persistedScope);
            }
        }
        // Add default scopes
        else {
            for (var defaultScope : defaultOAuthScopes) {
                scopeListModel.addElement(defaultScope);
            }
        }
        
        // Set model for list
        scopeList.setModel(scopeListModel);
    }
    
    private void updateLoginSettingsLayout() {
        // Get necessary data
        var loggedInUser = LoginSettings.loggedInUser;
        var applicationIdFieldText = applicationIdField.getText().trim();
        var scopeListItems = SwingHelper.getItemsFromJList(scopeList);
        var scopeListSelectedValue = scopeList.getSelectedValue();
        var addScopeFieldText = addScopeField.getText().trim();

        // ----- Application ID field ----- //
        
        applicationIdField.setEnabled(loggedInUser == null);
        
        // ----- Scope list layout ----- //
        
        // Enable list if there's no logged-in user
        scopeList.setEnabled(loggedInUser == null);
        
        // Clear list selection if the list is disabled
        if (!scopeList.isEnabled()) {
            scopeList.clearSelection();
        }
        
        // Enable remove button if:
        // 1. the list is enabled
        // 2. it has a selected item
        // 3. it has at least 2 items
        removeScopeButton.setEnabled(scopeList.isEnabled() &&
                scopeListSelectedValue != null &&
                scopeListItems.size() > 1
        );
        
        // Enable defaults button if the list is enabled
        setDefaultScopesButton.setEnabled(scopeList.isEnabled());
        
        // ----- Add scope layout ----- //
        
        // Clear add field if the list is disabled
        if (!scopeList.isEnabled()) {
            addScopeField.setText("");
        }
        
        // Enable add field if the list is enabled
        addScopeField.setEnabled(scopeList.isEnabled());
        
        // Enable add button if the add field is enabled and the it's not empty
        addScopeButton.setEnabled(addScopeField.isEnabled() && !addScopeFieldText.isBlank());
        
        // ----- Account layout ----- //
        
        // No user
        if (loggedInUser == null) {
            // Status label to red
            accountStatusLabel.setForeground(new java.awt.Color(255, 102, 102));
            accountStatusLabel.setText("No account");
            
            // Button to login and enable if application ID is filled out and
            // at least one scope is defined
            loginLogoutButton.setText("Login");
            loginLogoutButton.setEnabled(!applicationIdFieldText.isBlank() && !scopeListItems.isEmpty());
        }
        // Has user
        else {
            // Status label to green
            accountStatusLabel.setForeground(new java.awt.Color(102, 255, 102));
            accountStatusLabel.setText(loggedInUser.getDisplayName());
            
            // Button to logout
            loginLogoutButton.setText("Logout");
        }
    }
    
    private void setEventSubSettingsEnabled(boolean enabled) {
        channelIdField.setEnabled(enabled);
        eventList.setEnabled(enabled);
        setDefaultEventsButton.setEnabled(enabled);
        addEventField.setEnabled(enabled);
        
        if (!enabled) {
            eventList.clearSelection();
            removeEventButton.setEnabled(false);
            addEventField.setText("");
            addEventButton.setEnabled(false);
        }
    }

    @Override
    public void onEventSubManagerConnecting() {
        // Set status label
        connectionStatusLabel.setForeground(new Color(102, 102, 255));
        connectionStatusLabel.setText("Connecting...");
        
        // Set connection button
        connectDisconnectButton.setText("Disconnect");
        
        // Disable EventSub settings
        setEventSubSettingsEnabled(false);
    }

    @Override
    public void onEventSubManagerConnected() {
        // Set status label
        connectionStatusLabel.setForeground(new Color(102, 255, 102));
        connectionStatusLabel.setText("Connected");
        
        // Set connection button
        connectDisconnectButton.setText("Disconnect");
        
        // Disable EventSub settings
        setEventSubSettingsEnabled(false);
    }

    @Override
    public void onEventSubManagerDisconnected() {
        // Set status label
        connectionStatusLabel.setForeground(new Color(255, 102, 102));
        connectionStatusLabel.setText("Disconnected");
        
        // Set connection button
        connectDisconnectButton.setText("Connect");
        
        // Enable EventSub settings
        setEventSubSettingsEnabled(true);
    }

    @Override
    public void onEventSubMessage(JSONObject message) {   
    }

    @Override
    public void onOAuthLoginSuccess(String accessToken) {
        // Get application ID
        var applicationId = applicationIdField.getText().trim();

        // Query logged-in user's data
        TwitchApiHelper.getLoggedInUser(applicationId, accessToken, new TwitchApiHelper.GetLoggedInUserResponse() {
            @Override
            public void onError(String message) {
                // Notify user
                JOptionPane.showMessageDialog(
                    MainWindow.this,
                    "An error occurred during user request.\n\nError:\n" + message,
                    "User request error",
                    JOptionPane.ERROR_MESSAGE
                );
            }

            @Override
            public void onSuccess(TwitchUser user) {
                // Set config
                LoginSettings.accessToken = accessToken;
                LoginSettings.applicationId = applicationId;
                LoginSettings.scopes = SwingHelper.getItemsFromJList(scopeList);
                LoginSettings.loggedInUser = user;
                
                // Save config
                LoginSettings.persistData();
                
                // Update UI
                updateLoginSettingsLayout();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountStatusLabel;
    private javax.swing.JLabel accountTitle;
    private javax.swing.JButton addEventButton;
    private javax.swing.JTextField addEventField;
    private javax.swing.JLabel addEventTitle;
    private javax.swing.JButton addScopeButton;
    private javax.swing.JTextField addScopeField;
    private javax.swing.JLabel addScopeTitle;
    private javax.swing.JTextField applicationIdField;
    private javax.swing.JLabel applicationIdTitle;
    private javax.swing.JTextField channelIdField;
    private javax.swing.JLabel channelIdTitle;
    private javax.swing.JButton connectDisconnectButton;
    private javax.swing.JLabel connectionStatusLabel;
    private javax.swing.JLabel connectionStatusTitle;
    private javax.swing.JList<String> eventList;
    private javax.swing.JScrollPane eventListScrollPane;
    private javax.swing.JLabel eventListTitle;
    private javax.swing.JButton loginLogoutButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JButton removeEventButton;
    private javax.swing.JButton removeScopeButton;
    private javax.swing.JList<String> scopeList;
    private javax.swing.JScrollPane scopeListScrollPane;
    private javax.swing.JLabel scopesTitle;
    private javax.swing.JButton setDefaultEventsButton;
    private javax.swing.JButton setDefaultScopesButton;
    private javax.swing.JButton setDefaultTwitchIdButton;
    private javax.swing.JPanel twitchConnectionPanel;
    // End of variables declaration//GEN-END:variables
}
