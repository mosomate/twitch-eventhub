/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hu.mosomate.twitcheventhub;

import com.formdev.flatlaf.FlatDarkLaf;
import hu.mosomate.twitcheventhub.ui.AddEventPanel;
import hu.mosomate.twitcheventhub.ui.AddScopePanel;
import hu.mosomate.twitcheventhub.ui.MessageDispatcherPanel;
import hu.mosomate.twitcheventhub.utils.SwingHelper;
import hu.mosomate.twitcheventhub.utils.TwitchApiHelper;
import hu.mosomate.twitcheventhub.utils.TwitchUser;
import hu.mosomate.twitcheventhub.utils.eventsub.EventSubManager;
import hu.mosomate.twitcheventhub.utils.eventsub.EventSubManagerListener;
import hu.mosomate.twitcheventhub.utils.oauth.OAuthHelper;
import hu.mosomate.twitcheventhub.utils.oauth.OAuthLoginListener;
import hu.mosomate.twitcheventhub.utils.services.UdpDispatchManager;
import hu.mosomate.twitcheventhub.utils.services.WebServerManager;
import hu.mosomate.twitcheventhub.utils.services.WebSocketDispatchManager;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import org.apache.commons.lang3.StringUtils;
import org.java_websocket.WebSocket;

/**
 * Main window for EventHub.
 * 
 * @author mosomate
 */
public class MainWindow extends javax.swing.JFrame implements EventSubManagerListener, OAuthLoginListener, WebSocketDispatchManager.ActionListener, UdpDispatchManager.ActionListener {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MainWindow.class.getName());
    
    // Some color constants
    private static final Color COLOR_TEXT_RED = new Color(255, 102, 102);
    private static final Color COLOR_TEXT_GREEN = new Color(102, 255, 102);
    private static final Color COLOR_TEXT_BLUE = new Color(102, 102, 255);
    private static final Color COLOR_TEXT_WHITE = new Color(204, 204, 204);
    
    /**
     * Manages the WebSocket connection and subscription to EvenSub service
     */
    private final EventSubManager eventSubManager;
    
    /**
     * Manages the web server needed for login process and static content serving
     */
    private final WebServerManager webServerManager;
    
    /**
     * Receives messages from EventSub and redistributes them to it's clients
     */
    private final WebSocketDispatchManager wsDispatchManager;
    
    /**
     * Receives messages from EventSub and redistributes them as UDP packages
     */
    private final UdpDispatchManager udpDispatchManager;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        // ----- Init services ----- //
        
        // Web server
        webServerManager = new WebServerManager(this);
        webServerManager.start();
        
        // EventSubManager
        eventSubManager = new EventSubManager(this);
        
        // UDP dispatcher
        udpDispatchManager = new UdpDispatchManager(this);
        
        // WebSocket dispatcher
        wsDispatchManager = new WebSocketDispatchManager(this);
        
        // ----- Init layout ----- //
        
        // Init views
        initLoginSettingsViews();
        initEventSubSettingsViews();
        initWsDispatchLayout();
        initUdpDispatchLayout();
        
        // Update UI to initial state
        updateLoginSettingsLayout();
        updateEventSubSettingsLayout();
        updateWsDispatchLayout();
        updateUdpDispatchLayout();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        twitchConnectionPanel = new javax.swing.JPanel();
        eventsubConnectionPanel = new javax.swing.JPanel();
        eventsubConnectionStatusTitle = new javax.swing.JLabel();
        eventsubConnectionStatusLabel = new javax.swing.JLabel();
        eventsubConnectButton = new javax.swing.JButton();
        eventListPanel = new javax.swing.JPanel();
        eventRemoveButton = new javax.swing.JButton();
        eventAddButton = new javax.swing.JButton();
        eventListScrollPane = new javax.swing.JScrollPane();
        eventList = new javax.swing.JList<>();
        eventListTitle = new javax.swing.JLabel();
        loginPanel = new javax.swing.JPanel();
        accountPanel = new javax.swing.JPanel();
        accountPanelLabel = new javax.swing.JLabel();
        accountStatusLabel = new javax.swing.JLabel();
        loginLogoutButton = new javax.swing.JButton();
        scopeListPanel = new javax.swing.JPanel();
        scopeListPanelLabel = new javax.swing.JLabel();
        scopeListScrollPane = new javax.swing.JScrollPane();
        scopeList = new javax.swing.JList<>();
        scopeListRemoveButton = new javax.swing.JButton();
        scopeListAddButton = new javax.swing.JButton();
        applicationIdPanel = new javax.swing.JPanel();
        applicationIdPanelLabel = new javax.swing.JLabel();
        applicationIdField = new javax.swing.JTextField();
        dispatchSettingsPanel = new javax.swing.JPanel();
        wssSettingsPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        wssStatusLabel = new javax.swing.JLabel();
        wsDispatchStatusLabel = new javax.swing.JLabel();
        wsStartStopButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        wssPortLabel = new javax.swing.JLabel();
        wsDispatchPortField = new javax.swing.JTextField();
        udpSettingsPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        udpPortsField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        udpStatusLabel = new javax.swing.JLabel();
        udpStartStopButton = new javax.swing.JButton();
        dispatchMessageButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Twitch Eventhub");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        twitchConnectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("EventSub settings"));
        twitchConnectionPanel.setToolTipText("");
        twitchConnectionPanel.setName(""); // NOI18N
        twitchConnectionPanel.setPreferredSize(new java.awt.Dimension(280, 35));

        eventsubConnectionStatusTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        eventsubConnectionStatusTitle.setText("Connection status");

        eventsubConnectionStatusLabel.setForeground(new java.awt.Color(255, 102, 102));
        eventsubConnectionStatusLabel.setText("Disconnected");

        eventsubConnectButton.setText("Connect");
        eventsubConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventsubConnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eventsubConnectionPanelLayout = new javax.swing.GroupLayout(eventsubConnectionPanel);
        eventsubConnectionPanel.setLayout(eventsubConnectionPanelLayout);
        eventsubConnectionPanelLayout.setHorizontalGroup(
            eventsubConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsubConnectionPanelLayout.createSequentialGroup()
                .addComponent(eventsubConnectionStatusTitle)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(eventsubConnectionPanelLayout.createSequentialGroup()
                .addComponent(eventsubConnectionStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eventsubConnectButton))
        );
        eventsubConnectionPanelLayout.setVerticalGroup(
            eventsubConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventsubConnectionPanelLayout.createSequentialGroup()
                .addComponent(eventsubConnectionStatusTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventsubConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventsubConnectionStatusLabel)
                    .addComponent(eventsubConnectButton)))
        );

        eventRemoveButton.setText("Remove");
        eventRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventRemoveButtonActionPerformed(evt);
            }
        });

        eventAddButton.setText("Add");
        eventAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventAddButtonActionPerformed(evt);
            }
        });

        eventList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        eventList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                eventListValueChanged(evt);
            }
        });
        eventListScrollPane.setViewportView(eventList);

        eventListTitle.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        eventListTitle.setText("Events");

        javax.swing.GroupLayout eventListPanelLayout = new javax.swing.GroupLayout(eventListPanel);
        eventListPanel.setLayout(eventListPanelLayout);
        eventListPanelLayout.setHorizontalGroup(
            eventListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventListPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(eventAddButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eventRemoveButton))
            .addGroup(eventListPanelLayout.createSequentialGroup()
                .addComponent(eventListTitle)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(eventListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );
        eventListPanelLayout.setVerticalGroup(
            eventListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventListPanelLayout.createSequentialGroup()
                .addComponent(eventListTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventListScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventRemoveButton)
                    .addComponent(eventAddButton)))
        );

        javax.swing.GroupLayout twitchConnectionPanelLayout = new javax.swing.GroupLayout(twitchConnectionPanel);
        twitchConnectionPanel.setLayout(twitchConnectionPanelLayout);
        twitchConnectionPanelLayout.setHorizontalGroup(
            twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(twitchConnectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eventsubConnectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        twitchConnectionPanelLayout.setVerticalGroup(
            twitchConnectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(twitchConnectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eventListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(eventsubConnectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        loginPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Account settings"));

        accountPanelLabel.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        accountPanelLabel.setText("Current account");

        accountStatusLabel.setForeground(new java.awt.Color(255, 102, 102));
        accountStatusLabel.setText("No account");

        loginLogoutButton.setText("Login");
        loginLogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginLogoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout accountPanelLayout = new javax.swing.GroupLayout(accountPanel);
        accountPanel.setLayout(accountPanelLayout);
        accountPanelLayout.setHorizontalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addComponent(accountPanelLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addComponent(accountStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loginLogoutButton))
        );
        accountPanelLayout.setVerticalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addComponent(accountPanelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountStatusLabel)
                    .addComponent(loginLogoutButton)))
        );

        scopeListPanelLabel.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        scopeListPanelLabel.setText("Scopes");

        scopeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scopeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                scopeListValueChanged(evt);
            }
        });
        scopeListScrollPane.setViewportView(scopeList);

        scopeListRemoveButton.setText("Remove");
        scopeListRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scopeListRemoveButtonActionPerformed(evt);
            }
        });

        scopeListAddButton.setText("Add");
        scopeListAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scopeListAddButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout scopeListPanelLayout = new javax.swing.GroupLayout(scopeListPanel);
        scopeListPanel.setLayout(scopeListPanelLayout);
        scopeListPanelLayout.setHorizontalGroup(
            scopeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scopeListPanelLayout.createSequentialGroup()
                .addComponent(scopeListPanelLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(scopeListScrollPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, scopeListPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scopeListAddButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scopeListRemoveButton))
        );
        scopeListPanelLayout.setVerticalGroup(
            scopeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scopeListPanelLayout.createSequentialGroup()
                .addComponent(scopeListPanelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scopeListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(scopeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scopeListRemoveButton)
                    .addComponent(scopeListAddButton)))
        );

        applicationIdPanelLabel.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        applicationIdPanelLabel.setText("Application ID");

        applicationIdField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                applicationIdFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout applicationIdPanelLayout = new javax.swing.GroupLayout(applicationIdPanel);
        applicationIdPanel.setLayout(applicationIdPanelLayout);
        applicationIdPanelLayout.setHorizontalGroup(
            applicationIdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationIdPanelLayout.createSequentialGroup()
                .addComponent(applicationIdPanelLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(applicationIdField)
        );
        applicationIdPanelLayout.setVerticalGroup(
            applicationIdPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(applicationIdPanelLayout.createSequentialGroup()
                .addComponent(applicationIdPanelLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applicationIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accountPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(applicationIdPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scopeListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(applicationIdPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scopeListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(accountPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        wssSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Web socket server settings"));

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 44));

        wssStatusLabel.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        wssStatusLabel.setText("Status");

        wsDispatchStatusLabel.setForeground(new java.awt.Color(255, 102, 102));
        wsDispatchStatusLabel.setText("Not running");

        wsStartStopButton.setText("Start");
        wsStartStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wsStartStopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(wssStatusLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(wsDispatchStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(wsStartStopButton))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(wssStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wsDispatchStatusLabel)
                    .addComponent(wsStartStopButton)))
        );

        wssPortLabel.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        wssPortLabel.setText("Port");

        wsDispatchPortField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                wsDispatchPortFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wssPortLabel)
                    .addComponent(wsDispatchPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(wssPortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wsDispatchPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout wssSettingsPanelLayout = new javax.swing.GroupLayout(wssSettingsPanel);
        wssSettingsPanel.setLayout(wssSettingsPanelLayout);
        wssSettingsPanelLayout.setHorizontalGroup(
            wssSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wssSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wssSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        wssSettingsPanelLayout.setVerticalGroup(
            wssSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(wssSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        udpSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("UDP sender settings"));
        udpSettingsPanel.setPreferredSize(new java.awt.Dimension(200, 137));

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        jLabel2.setText("Ports");

        udpPortsField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                udpPortsFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(udpPortsField)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(udpPortsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 1, 12)); // NOI18N
        jLabel3.setText("Status");

        udpStatusLabel.setForeground(new java.awt.Color(255, 102, 102));
        udpStatusLabel.setText("Not running");

        udpStartStopButton.setText("Start");
        udpStartStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                udpStartStopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(udpStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(udpStartStopButton))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(udpStatusLabel)
                    .addComponent(udpStartStopButton)))
        );

        javax.swing.GroupLayout udpSettingsPanelLayout = new javax.swing.GroupLayout(udpSettingsPanel);
        udpSettingsPanel.setLayout(udpSettingsPanelLayout);
        udpSettingsPanelLayout.setHorizontalGroup(
            udpSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(udpSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(udpSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        udpSettingsPanelLayout.setVerticalGroup(
            udpSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(udpSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dispatchMessageButton.setText("Dispatch message");
        dispatchMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dispatchMessageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dispatchSettingsPanelLayout = new javax.swing.GroupLayout(dispatchSettingsPanel);
        dispatchSettingsPanel.setLayout(dispatchSettingsPanelLayout);
        dispatchSettingsPanelLayout.setHorizontalGroup(
            dispatchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wssSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(dispatchSettingsPanelLayout.createSequentialGroup()
                .addComponent(udpSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dispatchSettingsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dispatchMessageButton)
                .addContainerGap())
        );
        dispatchSettingsPanelLayout.setVerticalGroup(
            dispatchSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dispatchSettingsPanelLayout.createSequentialGroup()
                .addComponent(wssSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(udpSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dispatchMessageButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(twitchConnectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dispatchSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(twitchConnectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                    .addComponent(loginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dispatchSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eventListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_eventListValueChanged
        updateEventSubSettingsLayout();
    }//GEN-LAST:event_eventListValueChanged

    private void eventRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventRemoveButtonActionPerformed
        // Get currently selected item index
        var eventIndex = eventList.getSelectedIndex();
        
        // Remove from model
        ((DefaultListModel) eventList.getModel()).remove(eventIndex);
        
        updateEventSubSettingsLayout();
    }//GEN-LAST:event_eventRemoveButtonActionPerformed

    private void eventsubConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventsubConnectButtonActionPerformed
        // Disconnect
        if (eventSubManager.isConnected()) {
            eventSubManager.close();
        }
        // Connect
        else {
            // Get a list of current event types
            var currentEvents = SwingHelper.getItemsFromJList(eventList);
            
            // Init connection
            eventSubManager.connect(
                    AppSettings.applicationId,
                    AppSettings.accessToken,
                    AppSettings.loggedInUser.getId(),
                    currentEvents
            );
        }
    }//GEN-LAST:event_eventsubConnectButtonActionPerformed

    private void loginLogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginLogoutButtonActionPerformed
        // Has logged-in user, log out
        if (AppSettings.loggedInUser != null) {
            // Clear data
            AppSettings.accessToken = null;
            AppSettings.loggedInUser = null;
            
            // Update UI
            updateLoginSettingsLayout();
            updateEventSubSettingsLayout();
        }
        else {
            // Get application ID
            var applicationId = applicationIdField.getText().trim();
            
            // Get scopes from the list
            var scopes = SwingHelper.getItemsFromJList(scopeList);
            
            // Init login process
            if (!OAuthHelper.initLogin(applicationId, scopes)) {
                // Notify user if the browser cannot be opened
                JOptionPane.showMessageDialog(
                    MainWindow.this,
                    "Login failed. Check if you have a web browser installed!",
                    "Login error",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
    }//GEN-LAST:event_loginLogoutButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Persist data
        AppSettings.persistData();

        // Stop web server
        webServerManager.stop();
        
        // Disconnect EvetSub
        eventSubManager.close();
        
        // Stop WebSocket dispatcher
        wsDispatchManager.stop();
        
        // Stop UDP dispatcher
        udpDispatchManager.stop();
    }//GEN-LAST:event_formWindowClosing

    private void scopeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_scopeListValueChanged
        updateLoginSettingsLayout();
    }//GEN-LAST:event_scopeListValueChanged

    private void scopeListRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scopeListRemoveButtonActionPerformed
        // Get currently selected item index
        var scopeIndex = scopeList.getSelectedIndex();
        
        // Remove from model
        ((DefaultListModel) scopeList.getModel()).remove(scopeIndex);
        
        // Update UI
        updateLoginSettingsLayout();
    }//GEN-LAST:event_scopeListRemoveButtonActionPerformed

    private void scopeListAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scopeListAddButtonActionPerformed
        var dialog = new JDialog();
        dialog.setTitle("Add scope");
        dialog.setModal(true); // This makes the dialog block the parent frame
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        
        // Add the JPanel to the JDialog
        var panel = new AddScopePanel((Object... data) -> {
            var newScope = (String) data[0];
            
            // Add new event
            if (!SwingHelper.safeAddToJList(scopeList, newScope)) {
                // Notify user
                JOptionPane.showMessageDialog(
                        MainWindow.this,
                        newScope + " is already added!",
                        "Already added",
                        JOptionPane.WARNING_MESSAGE
                );
            }
            
            // Close dialog
            dialog.setVisible(false);
            
            updateLoginSettingsLayout();
        });
        dialog.add(panel);
        
        // Set the size and position
        dialog.pack();
        dialog.setLocationRelativeTo(this); // Center the dialog on the screen
        dialog.setResizable(false);
        dialog.getRootPane().setDefaultButton(panel.getPositiveButton());
        
        // Make the dialog visible
        dialog.setVisible(true);
    }//GEN-LAST:event_scopeListAddButtonActionPerformed

    private void applicationIdFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_applicationIdFieldKeyTyped
        updateLoginSettingsLayout();
    }//GEN-LAST:event_applicationIdFieldKeyTyped

    private void eventAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventAddButtonActionPerformed
        var dialog = new JDialog();
        dialog.setTitle("Add event");
        dialog.setModal(true); // This makes the dialog block the parent frame
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        
        // Add the JPanel to the JDialog
        var panel = new AddEventPanel((Object... data) -> {
            var newEvent = (String) data[0];
            
            // Add new event
            if (!SwingHelper.safeAddToJList(eventList, newEvent)) {
                // Notify user
                JOptionPane.showMessageDialog(
                        MainWindow.this,
                        newEvent + " is already added!",
                        "Already added",
                        JOptionPane.WARNING_MESSAGE
                );
            }
            
            // Close dialog
            dialog.setVisible(false);
            
            updateEventSubSettingsLayout();
        });
        dialog.add(panel);
        
        // Set the size and position
        dialog.pack();
        dialog.setLocationRelativeTo(this); // Center the dialog on the screen
        dialog.setResizable(false);
        dialog.getRootPane().setDefaultButton(panel.getPositiveButton());
        
        // Make the dialog visible
        dialog.setVisible(true);
    }//GEN-LAST:event_eventAddButtonActionPerformed

    private void wsDispatchPortFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wsDispatchPortFieldKeyReleased
        updateWsDispatchLayout();
    }//GEN-LAST:event_wsDispatchPortFieldKeyReleased

    private void wsStartStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wsStartStopButtonActionPerformed
        // WebSocket service is running
        if (wsDispatchManager.isRunning()) {
            wsDispatchManager.stop();
        }
        // WebSocket service is not running
        else {
            // Get port string
            var port = Integer.parseInt(wsDispatchPortField.getText().trim());
            
            // Save port
            AppSettings.webSocketPort = port;
            
            // Start WebSocket dispatcher
            wsDispatchManager.start(port);
        }
    }//GEN-LAST:event_wsStartStopButtonActionPerformed

    private void udpStartStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_udpStartStopButtonActionPerformed
        // UDP service is running
        if (udpDispatchManager.isRunning()) {
            udpDispatchManager.stop();
        }
        // UDP service is not running
        else {
            // Get port strings
            var portStrings = udpPortsField.getText().split(",");
            
            // New array for integer ports
            var ports = new ArrayList<Integer>();
            
            // Parsing ports
            for (String portString : portStrings) {
                ports.add(Integer.valueOf(portString.trim()));
            }
            
            // Save ports
            AppSettings.udpPorts = ports;
            
            // Start UDP dispatcher
            udpDispatchManager.start(ports);
        }
    }//GEN-LAST:event_udpStartStopButtonActionPerformed

    private void udpPortsFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_udpPortsFieldKeyReleased
        updateUdpDispatchLayout();
    }//GEN-LAST:event_udpPortsFieldKeyReleased

    private void dispatchMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispatchMessageButtonActionPerformed
        var dialog = new JDialog();
        dialog.setTitle("Dispatch message");
        dialog.setModal(true); // This makes the dialog block the parent frame
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        
        // Add the JPanel to the JDialog
        var panel = new MessageDispatcherPanel((Object... data) -> {
            // Dispatch message
            onEventSubMessage((String) data[0]);
            
            // Close dialog
            dialog.setVisible(false);
        });
        dialog.add(panel);
        
        // Set the size and position
        dialog.pack();
        dialog.setLocationRelativeTo(this); // Center the dialog on the screen
        dialog.setResizable(false);
        dialog.getRootPane().setDefaultButton(panel.getPositiveButton());
        
        // Make the dialog visible
        dialog.setVisible(true);
    }//GEN-LAST:event_dispatchMessageButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        FlatDarkLaf.setup();
        
        // Load persisted data
        AppSettings.loadData();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MainWindow().setVisible(true));
    }
    
    private void initEventSubSettingsViews() {
        
        // ----- Event list ----- //
        
        // Set up event list model
        var eventListModel = new DefaultListModel();
        
        // Add persisted events
        if (AppSettings.events != null && !AppSettings.events.isEmpty()) {
            for (var persistedEvent : AppSettings.events) {
                eventListModel.addElement(persistedEvent);
            }
        }
        
        // Set model for list
        eventList.setModel(eventListModel);
    }
    
    private void initLoginSettingsViews() {
        
        // ---- Application ID field ----- //
        
        if (AppSettings.applicationId != null) {
            applicationIdField.setText(AppSettings.applicationId);
        }
        
        // ---- Scope list ----- //
        
        // New model for list
        var scopeListModel = new DefaultListModel();
        
        // Add persisted scopes
        if (AppSettings.scopes != null && !AppSettings.scopes.isEmpty()) {
            for (var persistedScope : AppSettings.scopes) {
                scopeListModel.addElement(persistedScope);
            }
        }
        
        // Set model for list
        scopeList.setModel(scopeListModel);
    }
    
    private void updateLoginSettingsLayout() {
        // Get necessary data
        var loggedInUser = AppSettings.loggedInUser;
        var applicationIdFieldText = applicationIdField.getText().trim();
        var scopeListItems = SwingHelper.getItemsFromJList(scopeList);
        var scopeListSelectedValue = scopeList.getSelectedValue();

        // ----- Application ID field ----- //
        
        applicationIdField.setEnabled(loggedInUser == null);
        
        // ----- Scopes layout ----- //
        
        // Enable list if there's no logged-in user
        scopeList.setEnabled(loggedInUser == null);
        
        // Clear list selection if the list is disabled
        if (!scopeList.isEnabled()) {
            scopeList.clearSelection();
        }
        
        // Enable add button if the list is enabled
        scopeListAddButton.setEnabled(scopeList.isEnabled());
        
        // Enable remove button if:
        // 1. the list is enabled
        // 2. it has a selected item
        scopeListRemoveButton.setEnabled(scopeList.isEnabled() &&
                scopeListSelectedValue != null
        );
        
        // ----- Account layout ----- //
        
        // No user
        if (loggedInUser == null) {
            // Status label to red
            accountStatusLabel.setForeground(COLOR_TEXT_RED);
            accountStatusLabel.setText("No account");
            
            // Button to login and enable if application ID is filled out and
            // at least one scope is defined
            loginLogoutButton.setText("Login");
            loginLogoutButton.setEnabled(!applicationIdFieldText.isBlank() && !scopeListItems.isEmpty());
        }
        // Has user
        else {
            // Status label to green
            accountStatusLabel.setForeground(COLOR_TEXT_GREEN);
            accountStatusLabel.setText(loggedInUser.getDisplayName());
            
            // Button to logout
            loginLogoutButton.setText("Logout");
            
            // Disable logout button if we have an active EventSub connection
            loginLogoutButton.setEnabled(!eventSubManager.isConnected());
        }
    }
    
    private void updateEventSubSettingsLayout() {
        // Get necessary data
        var loggedInUser = AppSettings.loggedInUser;
        var eventSubConnected = eventSubManager.isConnected();
        var eventListItems = SwingHelper.getItemsFromJList(eventList);
        var eventListSelectedValue = eventList.getSelectedValue();
        
        // ----- Events layout ----- //
        
        // Enable list if EventSub is not connected
        eventList.setEnabled(!eventSubConnected);
        
        // Clear list selection if the list is disabled
        if (!eventList.isEnabled()) {
            eventList.clearSelection();
        }
        
        // Enable add button if the list is enabled
        eventAddButton.setEnabled(eventList.isEnabled());
        
        // Enable remove button if:
        // 1. the list is enabled
        // 2. it has a selected item
        eventRemoveButton.setEnabled(eventList.isEnabled() &&
                eventListSelectedValue != null
        );
        
        // ----- Connection status layout ----- //
        
        // Enable connect button if:
        // 1. the user is logged in
        // 2. at least one event is in the list
        eventsubConnectButton.setEnabled(loggedInUser != null &&
                !eventListItems.isEmpty()
        );
        
        // EventSub is connected
        if (eventSubConnected) {
            // Status label to green
            eventsubConnectionStatusLabel.setForeground(COLOR_TEXT_GREEN);
            eventsubConnectionStatusLabel.setText("Connected");
            
            // Button to disconnect
            eventsubConnectButton.setText("Disconnect");
        }
        // EventSub is not connected
        else {
            // Status label to red
            eventsubConnectionStatusLabel.setForeground(COLOR_TEXT_RED);
            eventsubConnectionStatusLabel.setText("Disconnected");
            
            // Button to connect
            eventsubConnectButton.setText("Connect");
        }
    }
    
    private void initUdpDispatchLayout() {
        
        // ----- UDP port list field ----- //
        
        if (AppSettings.udpPorts != null) {
            // Fill input field
            udpPortsField.setText(StringUtils.join(AppSettings.udpPorts, ","));
            
            // Start service automatically if UDP ports are provided
            udpDispatchManager.start(AppSettings.udpPorts);
        }
    }
    
    private void updateUdpDispatchLayout() {
        // Get necessary data
        var serviceRunning = udpDispatchManager.isRunning();
        var udpPortsFieldText = udpPortsField.getText().trim();
        var udpPortsFieldTextValid = udpPortsFieldText.matches(AppConstants.UDP_PORTS_LIST_REGEX);
        
        // ----- Port list layout ----- //
        
        // Enabled only if the service is not running
        udpPortsField.setEnabled(!serviceRunning);
        
        // Tint port field based on it's content
        if (udpPortsFieldTextValid) {
            udpPortsField.setForeground(COLOR_TEXT_WHITE);
        }
        else {
            udpPortsField.setForeground(COLOR_TEXT_RED);
        }

        // Service is running
        if (serviceRunning) {
            // Status label to green
            udpStatusLabel.setForeground(COLOR_TEXT_GREEN);
            udpStatusLabel.setText("Running");
            
            // Button to stop
            udpStartStopButton.setText("Stop");
            
            // Disable port input
            udpPortsField.setEnabled(false);
        }
        // EventSub is not connected
        else {
            // Status label to red
            udpStatusLabel.setForeground(COLOR_TEXT_RED);
            udpStatusLabel.setText("Not running");
            
            // Button to start
            udpStartStopButton.setText("Start");
            
            // Enabled button if the ports are provided
            udpStartStopButton.setEnabled(udpPortsFieldTextValid);
            
            // Enable port input
            udpPortsField.setEnabled(true);
        }
    }
    
    private void initWsDispatchLayout() {
        
        // ----- Port field ----- //
        
        if (AppSettings.webSocketPort != null) {
            // Fill input field
            wsDispatchPortField.setText(String.valueOf(AppSettings.webSocketPort));
            
            // Start service automatically if port is provided
            wsDispatchManager.start(AppSettings.webSocketPort);
        }
    }
    
    private void updateWsDispatchLayout() {
        // Get necessary data
        var serviceRunning = wsDispatchManager.isRunning();
        var wsDispatchPortFieldText = wsDispatchPortField.getText().trim();
        var wsDispatchPortFieldTextValid = wsDispatchPortFieldText.matches(AppConstants.WEBSOCKET_PORT_REGEX);
        
        // ----- Input layout ----- //
        
        // Enabled only if the service is not running
        wsDispatchPortField.setEnabled(!serviceRunning);
        
        // Tint port field based on it's content
        if (wsDispatchPortFieldTextValid) {
            wsDispatchPortField.setForeground(COLOR_TEXT_WHITE);
        }
        else {
            wsDispatchPortField.setForeground(COLOR_TEXT_RED);
        }

        // Service is running
        if (serviceRunning) {
            // Status label to green
            wsDispatchStatusLabel.setForeground(COLOR_TEXT_GREEN);
            wsDispatchStatusLabel.setText("Running");
            
            // Button to stop
            wsStartStopButton.setText("Stop");
            
            // Disable port input
            wsDispatchPortField.setEnabled(false);
        }
        // EventSub is not connected
        else {
            // Status label to red
            wsDispatchStatusLabel.setForeground(COLOR_TEXT_RED);
            wsDispatchStatusLabel.setText("Not running");
            
            // Button to start
            wsStartStopButton.setText("Start");
            
            // Enabled button if the ports are provided
            wsStartStopButton.setEnabled(wsDispatchPortFieldTextValid);
            
            // Enable port input
            wsDispatchPortField.setEnabled(true);
        }
    }

    @Override
    public void onEventSubManagerConnecting(int step, Object... params) {
        // Set status label to blue
        eventsubConnectionStatusLabel.setForeground(COLOR_TEXT_BLUE);
        
        // Set status label text
        var statusLabel = switch (step) {
            case EventSubManager.CONNECTION_STEP_INITIATED -> "Connecting...";
            case EventSubManager.CONNECTION_STEP_WEBSOCKET_CONNECTED -> "Websocket connected";
            case EventSubManager.CONNECTION_STEP_SUBSCRIBING -> {
                // Get freshly subbed event
                var subbedEvent = (String) params[0];
                
                // Get events from the list
                var events = SwingHelper.getItemsFromJList(eventList);
                
                // Get index of subbed event
                var subbedEventIndex = events.indexOf(subbedEvent);
                
                // This is not possible, but better to handle it
                if (subbedEventIndex == -1) {
                    yield "Subscribing to events [?/" + events.size() + "]";
                }
                
                yield "Subscribing to events [" + (subbedEventIndex + 1) + "/" + events.size() + "]";
            }
            default -> "Disconnected";
        };
        
        eventsubConnectionStatusLabel.setText(statusLabel);
    }

    @Override
    public void onEventSubError(String message) {
        // Notify user
        JOptionPane.showMessageDialog(
                MainWindow.this,
                "Error during EvenSub connection! Error:\n\n" + message,
                "EvenSub connection",
                JOptionPane.ERROR_MESSAGE
        );
    }

    @Override
    public void onEventSubManagerConnected() {
        // Set events data on successful connection
        AppSettings.events = SwingHelper.getItemsFromJList(eventList);
        
        // Update UI
        updateEventSubSettingsLayout();
    }

    @Override
    public void onEventSubManagerDisconnected() {
        updateEventSubSettingsLayout();
    }

    @Override
    public void onEventSubMessage(String message) {
        // Send to WS dispatcher
        wsDispatchManager.sendMessage(message);

        // Send to UDP dispatcher
        udpDispatchManager.sendMessage(message);
    }

    @Override
    public void onOAuthLoginSuccess(String accessToken) {
        // Get application ID
        var applicationId = applicationIdField.getText().trim();

        // Query logged-in user's data
        TwitchApiHelper.getTokenUser(applicationId, accessToken, new TwitchApiHelper.TokenUserRequestListener() {
            @Override
            public void onError(String message) {
                // Notify user
                JOptionPane.showMessageDialog(
                    MainWindow.this,
                    "An error occurred during user request.\n\nError:\n" + message,
                    "User request error",
                    JOptionPane.ERROR_MESSAGE
                );
            }

            @Override
            public void onSuccess(TwitchUser user) {
                // Set config
                AppSettings.accessToken = accessToken;
                AppSettings.applicationId = applicationId;
                AppSettings.scopes = SwingHelper.getItemsFromJList(scopeList);
                AppSettings.loggedInUser = user;
                
                // Update UI
                updateLoginSettingsLayout();
                updateEventSubSettingsLayout();
            }
        });
    }

    @Override
    public void onUdpMessageSenderStarted() {
        updateUdpDispatchLayout();
    }

    @Override
    public void onUdpMessageSenderStopped() {
        updateUdpDispatchLayout();
    }

    @Override
    public void onWebSocketServerStarted() {
        updateWsDispatchLayout();
    }

    @Override
    public void onWebSocketServerStopped() {
        updateWsDispatchLayout();
    }

    @Override
    public void onWebSocketClientConnected(WebSocket ws) {
        // Not really necessary to handle this
    }

    @Override
    public void onWebSocketClientDisconnected(WebSocket ws) {
        // We do nothing here
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel accountPanel;
    private javax.swing.JLabel accountPanelLabel;
    private javax.swing.JLabel accountStatusLabel;
    private javax.swing.JTextField applicationIdField;
    private javax.swing.JPanel applicationIdPanel;
    private javax.swing.JLabel applicationIdPanelLabel;
    private javax.swing.JButton dispatchMessageButton;
    private javax.swing.JPanel dispatchSettingsPanel;
    private javax.swing.JButton eventAddButton;
    private javax.swing.JList<String> eventList;
    private javax.swing.JPanel eventListPanel;
    private javax.swing.JScrollPane eventListScrollPane;
    private javax.swing.JLabel eventListTitle;
    private javax.swing.JButton eventRemoveButton;
    private javax.swing.JButton eventsubConnectButton;
    private javax.swing.JPanel eventsubConnectionPanel;
    private javax.swing.JLabel eventsubConnectionStatusLabel;
    private javax.swing.JLabel eventsubConnectionStatusTitle;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton loginLogoutButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JList<String> scopeList;
    private javax.swing.JButton scopeListAddButton;
    private javax.swing.JPanel scopeListPanel;
    private javax.swing.JLabel scopeListPanelLabel;
    private javax.swing.JButton scopeListRemoveButton;
    private javax.swing.JScrollPane scopeListScrollPane;
    private javax.swing.JPanel twitchConnectionPanel;
    private javax.swing.JTextField udpPortsField;
    private javax.swing.JPanel udpSettingsPanel;
    private javax.swing.JButton udpStartStopButton;
    private javax.swing.JLabel udpStatusLabel;
    private javax.swing.JTextField wsDispatchPortField;
    private javax.swing.JLabel wsDispatchStatusLabel;
    private javax.swing.JButton wsStartStopButton;
    private javax.swing.JLabel wssPortLabel;
    private javax.swing.JPanel wssSettingsPanel;
    private javax.swing.JLabel wssStatusLabel;
    // End of variables declaration//GEN-END:variables
}
